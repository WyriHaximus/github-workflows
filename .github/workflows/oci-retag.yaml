name: OCI Image Re-tag

on:
  workflow_call:
    inputs:
      runsOn:
        description: Define on which runner this workflow should run
        default: "ubuntu-latest"
        required: false
        type: string
      from:
        description: The original tag to retag from
        required: true
        type: string
      to:
        description: The target tag to retag to
        required: true
        type: string
      ociPushSecretSecret:
        description: The secret name that holds the token to push OCI images to GHCR.io
        default: "GITHUB_TOKEN"
        required: false
        type: string
jobs:
  oci-retag:
    name: OCI Image Re-tag
    runs-on: ${{ inputs.runsOn }}
    steps:
      - uses: docker/login-action@v3
        with:
          registry: ghcr.io
          username: ${{ github.actor }}
          password: ${{ secrets[inputs.ociPushSecretSecret] }}
      - name: Set up QEMU
        if: inputs.runsOn == 'ubuntu-latest'
        uses: docker/setup-qemu-action@v3
      - name: Set up QEMU
        if: inputs.runsOn != 'ubuntu-latest'
        run: |
          sudo apt-get update
          sudo apt-get install -y qemu-user-static
      - name: Set up Docker Buildx
        id: buildx
        uses: docker/setup-buildx-action@v3
        with:
          install: true
      - name: Inspect builder
        run: |
          echo "Name:      ${{ steps.buildx.outputs.name }}"
          echo "Endpoint:  ${{ steps.buildx.outputs.endpoint }}"
          echo "Status:    ${{ steps.buildx.outputs.status }}"
          echo "Flags:     ${{ steps.buildx.outputs.flags }}"
          echo "Platforms: ${{ steps.buildx.outputs.platforms }}"
      - name: Prepare Dockerfile
        run: |
          echo "${{ inputs.from }}" | tr '[:upper:]' '[:lower:]'
          printf "FROM %s" $(echo "${{ inputs.from }}" | tr '[:upper:]' '[:lower:]') >> Dockerfile.tag
          cat Dockerfile.tag
      - name: Detect Platform Flag
        id: platform
        run: |
          printf "platform=%s" $(docker manifest inspect $(echo "${{ inputs.from }}" | tr '[:upper:]' '[:lower:]') | docker run --rm -i backplane/jq '([.manifests[].platform | select(.os != "unknown")]?) | .[] | (.os + "/" + .architecture)' | docker run --rm -i backplane/jq -s '. | join(",")') >> $GITHUB_OUTPUT
      - name: Pull, retag, and push image
        uses: nick-invision/retry@v3
        with:
          timeout_minutes: 120
          retry_wait_seconds: 10
          max_attempts: 13
          command: docker build --platform=${{ steps.platform.outputs.platform }} --output=type=registry --no-cache -f Dockerfile.tag -t $(echo "${{ inputs.to }}" | tr '[:upper:]' '[:lower:]') .
