name: Continuous Integration
on:
  workflow_call:
    inputs:
      jsonPattern:
        description: The pattern to match which JSON files to check
        default: "\\.json$"
        required: false
        type: string
      workingDirectory:
        description: The directory to run this workflow in
        default: ""
        required: false
        type: string
      services:
        description: Any additional services to use
        default: "{}"
        required: false
        type: string
      env:
        description: Any additional environment variables
        default: "{}"
        required: false
        type: string
      runsOnChaos:
        description: Define on which runner to run workflows where order doesn't matter should run
        default: "ubuntu-latest"
        required: false
        type: string
      runsOnOrder:
        description: Define on which runner to run workflows where order matters should run
        default: "ubuntu-latest"
        required: false
        type: string
      isProject:
        description: Whether or not this is a project, defaulting to package
        default: false
        required: false
        type: boolean
      supportedChecksCommand:
        description: The make command to invoke listing the different tasks to run across all versions, will also act as a prefix for All, Direct on OS, Lowest, Locked, and Highest task lists.
        default: "task-list-ci"
        required: false
        type: string

#defaults:
#  run:
#    working-directory: ${{ inputs.workingDirectory }}

jobs:
  package-name:
    name: Package Name
    runs-on: ${{ inputs.runsOnChaos }}
    outputs:
      package-name: ${{ steps.package-name.outputs.package-name }}
    steps:
      - uses: actions/checkout@v4
        with:
          sparse-checkout: |
            ${{ inputs.workingDirectory }}composer.json
            ${{ inputs.workingDirectory }}composer.lock
      - id: package-name
        working-directory: ${{ inputs.workingDirectory }}
        run: |
          printf "package-name=[\"%s\"]" $(docker run --rm -v "`pwd`:`pwd`" backplane/jq -r -c '.name' "$(pwd)/composer.json") >> $GITHUB_OUTPUT
  supported-versions-matrix:
    name: Supported Versions Matrix
    runs-on: ${{ inputs.runsOnChaos }}
    outputs:
      lowest: ${{ steps.supported-versions-matrix.outputs.lowest }}
      version: ${{ steps.supported-versions-matrix.outputs.version }}
      upcoming: ${{ steps.supported-versions-matrix.outputs.upcoming }}
      extensions: ${{ steps.supported-versions-matrix.outputs.extensions }}
    steps:
      - uses: actions/checkout@v4
        with:
          sparse-checkout: |
            ${{ inputs.workingDirectory }}composer.json
            ${{ inputs.workingDirectory }}composer.lock
      - id: supported-versions-matrix
        uses: WyriHaximus/github-action-composer-php-versions-in-range@v1
        with:
          upcomingReleases: true
          workingDirectory: ${{ inputs.workingDirectory }}
  supported-threading-matrix:
    name: Supported Threading Matrix
    needs:
      - supported-versions-matrix
    uses: ./.github/workflows/supported-threading-matrix.yaml
    with:
      extensions: ${{ needs.supported-versions-matrix.outputs.extensions }}
      runsOn: ${{ inputs.runsOnChaos }}
      isProject: ${{ inputs.isProject }}
  supported-checks-matrix:
    name: Supported Checks Matrix
    runs-on: ${{ inputs.runsOnChaos }}
    needs:
      - supported-threading-matrix
      - supported-versions-matrix
    outputs:
      check: ${{ steps.supported-checks-matrix.outputs.check }}
      all: ${{ steps.supported-checks-matrix.outputs.all }}
      dos: ${{ steps.supported-checks-matrix.outputs.dos }}
      low: ${{ steps.supported-checks-matrix.outputs.low }}
      locked: ${{ steps.supported-checks-matrix.outputs.locked }}
      high: ${{ steps.supported-checks-matrix.outputs.high }}
    steps:
      - uses: actions/checkout@v4
        with:
          sparse-checkout: |
            ${{ inputs.workingDirectory }}composer.json
            ${{ inputs.workingDirectory }}composer.lock
            ${{ inputs.workingDirectory }}Makefile
      - id: supported-checks-matrix
        name: Generate check
        run: |
          printf "Checks found: %s\r\n" $(make ${{ inputs.supportedChecksCommand }} || echo "[]")
          printf "check=%s\n" $(make ${{ inputs.supportedChecksCommand }} || echo "[]") >> $GITHUB_OUTPUT
          printf "All Checks found: %s\r\n" $(make ${{ inputs.supportedChecksCommand }}-all || echo "[]")
          printf "all=%s\n" $(make ${{ inputs.supportedChecksCommand }}-all || echo "[]") >> $GITHUB_OUTPUT
          printf "Directly on OS Checks found: %s\r\n" $(make ${{ inputs.supportedChecksCommand }}-dos || echo "[]")
          printf "dos=%s\n" $(make ${{ inputs.supportedChecksCommand }}-dos || echo "[]") >> $GITHUB_OUTPUT
          printf "Low Checks found: %s\r\n" $(make ${{ inputs.supportedChecksCommand }}-low || echo "[]")
          printf "low=%s\n" $(make ${{ inputs.supportedChecksCommand }}-low || echo "[]") >> $GITHUB_OUTPUT
          printf "Locked Checks found: %s\r\n" $(make ${{ inputs.supportedChecksCommand }}-locked || echo "[]")
          printf "locked=%s\n" $(make ${{ inputs.supportedChecksCommand }}-locked || echo "[]") >> $GITHUB_OUTPUT
          printf "High Checks found: %s\r\n" $(make ${{ inputs.supportedChecksCommand }}-high || echo "[]")
          printf "high=%s\n" $(make ${{ inputs.supportedChecksCommand }}-high || echo "[]") >> $GITHUB_OUTPUT
        working-directory: ${{ inputs.workingDirectory }}
  compile-matrix:
    name: Compile the matrix
    runs-on: ubuntu-latest
    needs:
      - supported-checks-matrix
      - supported-versions-matrix
      - supported-threading-matrix
    outputs:
      qa: ${{ steps.compile-qa-matrix.outputs.result }}
      directly-on-os: ${{ steps.compile-directly-on-os-matrix.outputs.result }}
    steps:
      - uses: actions/github-script@v7
        name: Compile the QA matrix
        id: compile-qa-matrix
        env:
          PHP_LOWEST: "${{ needs.supported-versions-matrix.outputs.lowest }}"
          PHP_VERSIONS: ${{ needs.supported-versions-matrix.outputs.version }}
          PHP_TO_THREAD_OR_NOT_TO_THREAD: ${{ needs.supported-threading-matrix.outputs.version }}
          THREAD_PRIMARY: ${{ needs.supported-threading-matrix.outputs.primary }}
          COMPOSER: '["lowest", "locked", "highest"]'
          CHECKS: ${{ needs.supported-checks-matrix.outputs.check }}
          CHECKS_ALL: ${{ needs.supported-checks-matrix.outputs.all }}
          CHECKS_LOW: ${{ needs.supported-checks-matrix.outputs.low }}
          CHECKS_LOCKED: ${{ needs.supported-checks-matrix.outputs.locked }}
          CHECKS_HIGH: ${{ needs.supported-checks-matrix.outputs.high }}
          IS_PROJECT: ${{ toJson(inputs.isProject) }}
        with:
          script: |
            let matrix = [];
            const phpLowest = JSON.parse(process.env.PHP_LOWEST);
            const phpVersions = JSON.parse(process.env.PHP_VERSIONS);
            const phpToThreadOrNotToThread = JSON.parse(process.env.PHP_TO_THREAD_OR_NOT_TO_THREAD);
            const threadPrimary = JSON.parse(process.env.THREAD_PRIMARY);
            const composer = JSON.parse(process.env.COMPOSER);
            const checks = JSON.parse(process.env.CHECKS);
            const checksAll = JSON.parse(process.env.CHECKS_ALL);
            const checksLow = JSON.parse(process.env.CHECKS_LOW);
            const checksLocked = JSON.parse(process.env.CHECKS_LOCKED === "[]" ? process.env.CHECKS : process.env.CHECKS_LOCKED);
            const checksHigh = JSON.parse(process.env.CHECKS_HIGH);
            if (JSON.parse(process.env.IS_PROJECT) == true) {
              for (const checkLocked in checksLocked) {
                  matrix.push({
                    php: phpLowest,
                    "php-to-thread-or-not-to-thread": threadPrimary,
                    composer: 'locked',
                    check: checksLocked[checkLocked],
                  });   
              }  
            } else {
              for (const checkLow in checksLow) {
                  matrix.push({
                    php: phpLowest,
                    "php-to-thread-or-not-to-thread": threadPrimary,
                    composer: 'lowest',
                    check: checksLow[checkLow],
                  });   
              }
              for (const checkLocked in checksLocked) {
                  matrix.push({
                    php: phpLowest,
                    "php-to-thread-or-not-to-thread": threadPrimary,
                    composer: 'locked',
                    check: checksLocked[checkLocked],
                  });   
              }
              for (const checkHigh in checksHigh) {
                  matrix.push({
                    php: phpLowest,
                    "php-to-thread-or-not-to-thread": threadPrimary,
                    composer: 'highest',
                    check: checksHigh[checkHigh],
                  });   
              }
              for (const ztsOrNts in phpToThreadOrNotToThread) {
                for (const composerAction in composer) {
                  for (const phpVersion in phpVersions) {
                    for (const checkAll in checksAll) {
                      matrix.push({
                        php: phpVersions[phpVersion],
                        "php-to-thread-or-not-to-thread": phpToThreadOrNotToThread[ztsOrNts],
                        composer: composer[composerAction],
                        check: checksAll[checkAll],
                      });
                    }
                    for (const check in checks) {
                      matrix.push({
                        php: phpVersions[phpVersion],
                        "php-to-thread-or-not-to-thread": phpToThreadOrNotToThread[ztsOrNts],
                        composer: composer[composerAction],
                        check: checks[check],
                      });
                    }
                  }
                }
              }
            }
            console.log(JSON.stringify(matrix, null, 4));
            return matrix;
      - uses: actions/github-script@v7
        name: Compile the Direction on OS matrix
        id: compile-directly-on-os-matrix
        env:
          OS: ${{ (contains(needs.supported-versions-matrix.outputs.extensions, 'pcntl') == false && contains(needs.supported-versions-matrix.outputs.extensions, 'parallel') == false) && '["ubuntu-latest", "ubuntu-24.04-arm", "windows-latest", "windows-11-arm", "macos-latest"]' || '["ubuntu-latest", "ubuntu-24.04-arm"]' }}
          PHP_VERSIONS: ${{ needs.supported-versions-matrix.outputs.version }}
          THREAD_PRIMARY: ${{ needs.supported-threading-matrix.outputs.primary }}
          COMPOSER: '["lowest", "locked", "highest"]'
          CHECKS: ${{ needs.supported-checks-matrix.outputs.check }}
          CHECKS_DOS: ${{ needs.supported-checks-matrix.outputs.dos }}
        with:
          script: |
            let matrix = [];
            const oses = JSON.parse(process.env.OS);
            const phpVersions = JSON.parse(process.env.PHP_VERSIONS);
            const threadPrimary = JSON.parse(process.env.THREAD_PRIMARY);
            const composer = JSON.parse(process.env.COMPOSER);
            const checks = JSON.parse(process.env.CHECKS_DOS === "[]" ? '["unit-testing-raw"]' : process.env.CHECKS);
            const checksDos = JSON.parse(process.env.CHECKS_DOS);
            for (const os in oses) {
              for (const composerAction in composer) {
                for (const phpVersion in phpVersions) {
                  for (const checkDos in checksDos) {
                    matrix.push({
                      os: oses[os],
                      php: phpVersions[phpVersion],
                      "php-to-thread-or-not-to-thread": threadPrimary,
                      composer: composer[composerAction],
                      check: checksDos[checkDos],
                    });
                  }
                  for (const check in checks) {
                    matrix.push({
                      os: oses[os],
                      php: phpVersions[phpVersion],
                      "php-to-thread-or-not-to-thread": threadPrimary,
                      composer: composer[composerAction],
                      check: checks[check],
                    });
                  }
                }
              }
            }
            console.log(JSON.stringify(matrix, null, 4));
            return matrix;
  can-require:
    name: Test we can require "${{ matrix.package-name }}" on PHP ${{ matrix.php }} (${{ matrix.php-to-thread-or-not-to-thread }})
    if: ${{ inputs.isProject == false }}
    strategy:
      fail-fast: false
      matrix:
        php: ${{ fromJson(needs.supported-versions-matrix.outputs.version) }}
        php-to-thread-or-not-to-thread: ${{ fromJson(needs.supported-threading-matrix.outputs.version) }}
        package-name: ${{ fromJson(needs.package-name.outputs.package-name) }}
    needs:
      - package-name
      - supported-versions-matrix
      - supported-threading-matrix
    runs-on: ${{ inputs.runsOnChaos }}
    container:
      image: ghcr.io/wyrihaximusnet/php:${{ matrix.php }}-${{ matrix.php-to-thread-or-not-to-thread }}-alpine-dev-root
    steps:
      - uses: actions/checkout@v4
        with:
          path: checked_out_package
          sparse-checkout: |
            ${{ inputs.workingDirectory }}composer.json
      - name: Set Up composer.json
        run: |
          echo "{\"repositories\": [{\"name\": \"${{ matrix.package-name }}\",\"type\": \"path\",\"url\": \"./checked_out_package\"}],\"minimum-stability\":\"dev\",\"prefer-stable\":true}" > composer.json
        working-directory: ${{ inputs.workingDirectory }}
      - name: Require package
        if: needs.supported-versions-matrix.outputs.upcoming != matrix.php
        run: |
          composer config --no-plugins "allow-plugins.*/*" true
          composer require "${{ matrix.package-name }}:dev-${GITHUB_SHA}" --no-progress --ansi --no-interaction --prefer-dist --no-plugins -o -vvv || composer require "${{ matrix.package-name }}:dev-${GITHUB_REF_NAME}" --no-progress --ansi --no-interaction --prefer-dist --no-plugins -o -vvv
        working-directory: ${{ inputs.workingDirectory }}
  qa:
    name: Run ${{ matrix.check }} on PHP ${{ matrix.php }} (${{ matrix.php-to-thread-or-not-to-thread }}) with ${{ matrix.composer }} dependency preference
    strategy:
      fail-fast: false
      matrix:
        include: ${{ fromJson(needs.compile-matrix.outputs.qa) }}
    needs:
      - compile-matrix
    runs-on: ubuntu-latest
    container:
      image: ghcr.io/wyrihaximusnet/php:${{ matrix.php }}-${{ matrix.php-to-thread-or-not-to-thread }}-alpine-dev-root
    env: ${{ fromJson(inputs.env) }}
    services: ${{ fromJson(inputs.services) }}
    steps:
      - uses: actions/checkout@v4
        with:
          fetch-depth: 0 # Required due to the way Git works, without it this action won't be able to find any or the correct tags
      - uses: ramsey/composer-install@v3
        with:
          dependency-versions: ${{ matrix.composer }}
          working-directory: ${{ inputs.workingDirectory }}
      - run: git config --global --add safe.directory $GITHUB_WORKSPACE # Do this ourselves because `actions/checkout@v4 doesn't succeed in doing this
        working-directory: ${{ inputs.workingDirectory }}
      - run: make ${{ matrix.check }}
        working-directory: ${{ inputs.workingDirectory }}
        env:
          COVERALLS_REPO_TOKEN: ${{ secrets.COVERALLS_REPO_TOKEN }}
          COVERALLS_RUN_LOCALLY: ${{ secrets.COVERALLS_RUN_LOCALLY }}
          OTEL_PHP_FIBERS_ENABLED: ${{ matrix.php-to-thread-or-not-to-thread == 'zts' && 'false' || 'true' }}
  directly-on-os:
    name: Run ${{ matrix.check }} on PHP ${{ matrix.php }} (${{ matrix.php-to-thread-or-not-to-thread }}) with ${{ matrix.composer }} dependency preference (${{ matrix.os }})
    strategy:
      fail-fast: false
      matrix:
        include: ${{ fromJson(needs.compile-matrix.outputs.directly-on-os) }}
    needs:
      - supported-checks-matrix
      - supported-versions-matrix
      - compile-matrix
    runs-on: ${{ matrix.os }}
    if: ${{ inputs.isProject == false }}
    env: ${{ fromJson(inputs.env) }}
    services: ${{ fromJson(inputs.services) }}
    steps:
      - uses: actions/checkout@v4
      - uses: shivammathur/setup-php@v2
        env:
          fail-fast: true
          phpts: ${{ matrix.php-to-thread-or-not-to-thread }}
        with:
          php-version: ${{ matrix.php }}
          coverage: pcov
          tools: pecl
          extensions: ${{ join(fromJson(needs.supported-versions-matrix.outputs.extensions), ',') }}
          ini-file: development
      - uses: ramsey/composer-install@v3
        with:
          dependency-versions: ${{ matrix.composer }}
          working-directory: ${{ inputs.workingDirectory }}
      - run: make ${{ matrix.check }}
        working-directory: ${{ inputs.workingDirectory }}
        env:
          COVERALLS_REPO_TOKEN: ${{ secrets.COVERALLS_REPO_TOKEN }}
          COVERALLS_RUN_LOCALLY: ${{ secrets.COVERALLS_RUN_LOCALLY }}
  check-mark:
    name: ✔️
    needs:
      - can-require
      - qa
      - directly-on-os
    runs-on: ${{ inputs.runsOnChaos }}
    steps:
      - run: echo "✔️"
